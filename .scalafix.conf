rules = [
  RemoveUnused,              # Removes unused imports, variables, and parameters
  ProcedureSyntax,           # Enforces explicit return type for Unit methods
  ExplicitResultTypes,       # Requires explicit return types for methods
  Disable,                   # Disables unsafe APIs
  NoValInForComprehension,   # Prevents `val` inside for-comprehensions
  LeakingImplicitClassVal,   # Warns about leaking `val` in implicit classes
  MissingFinal,              # Ensures `final` for case classes and objects
  DisableSyntax,             # Disallows unsafe syntax constructs
  OrganizeImports,           # Automatically organizes imports
  SortModifiers              # Sorts modifiers like `private final` consistently
]

# ExplicitResultTypes: Require explicit result types everywhere
ExplicitResultTypes.rewrite = true
ExplicitResultTypes.builtIn = ["all"]

# Remove unused code (strong enforcement)
RemoveUnused.imports = true
RemoveUnused.locals = true
RemoveUnused.privateMembers = true

# Disable dangerous/unsafe syntax (e.g., null, vars)
Disable.syntax = [
  "null",
  "return",
  "var",
  "asInstanceOf",
  "isInstanceOf"
]

# Ensure imports are well-structured
OrganizeImports.groupedImports = Merge
OrganizeImports.expandRelative = true

# Prevent leaking `val` in implicit classes
LeakingImplicitClassVal.enabled = true

# Enforce `final` for case classes and objects (best practice)
MissingFinal.enabled = true
MissingFinal.exclude = [
  "object Main"
]

# Enforce best syntax practices
DisableSyntax.noAutoTupling = true
DisableSyntax.noXml = true

# Make Scalafix checks fail if there are issues
Lint.reportAllIssues = true
